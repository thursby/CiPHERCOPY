# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  cli:
    name: CLI (Dart) — ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: cli
    steps:
      - uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Pub get
        run: dart pub get

      - name: Compile CLI executable
        shell: bash
        run: |
          OUT_DIR="dist/cli/${{ runner.os }}"
          mkdir -p "$OUT_DIR"
          BIN_NAME="ciphercopy"
          if [[ "${{ runner.os }}" == "Windows" ]]; then BIN_NAME+=".exe"; fi
          dart compile exe bin/ciphercopy_cli.dart -o "$OUT_DIR/$BIN_NAME"

  app:
    name: App (Flutter) — ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Enable desktop for host OS
        shell: bash
        run: |
          case "${{ runner.os }}" in
            macOS) flutter config --enable-macos-desktop ;;
            Windows) flutter config --enable-windows-desktop ;;
            Linux) flutter config --enable-linux-desktop ;;
          esac

      - name: Pub get
        run: flutter pub get

      - name: Build desktop app
        shell: bash
        run: |
          case "${{ runner.os }}" in
            macOS)
              flutter build macos
              ;;
            Windows)
              flutter build windows
              ;;
            Linux)
              sudo apt-get update
              sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
              flutter build linux
              ;;
          esac
